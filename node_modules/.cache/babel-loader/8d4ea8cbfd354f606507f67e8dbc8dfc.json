{"ast":null,"code":"var _jsxFileName = \"/Users/sathyasomu/Works/Personal/dropdown-search/src/components/searchDropdown.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchDropdown = () => {\n  _s();\n\n  const colors = ['voilet', 'green', 'blue', 'green', 'yellow', 'orange', 'red'];\n  const [selectedArray, setSelectedArray] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(null);\n  const [colorArray, setColorArray] = useState(colors);\n  const [dropdownVisible, setDropdownVisible] = useState(false);\n  const dropdownInputWrapperRef = useRef(null);\n  const dropdownInputRef = useRef(null);\n  const dropdownRef = useRef(null);\n  const closeDropdown = useCallback(() => {\n    setDropdownVisible(false);\n  }, [setDropdownVisible]);\n  useEffect(() => {\n    const handleOutsideClick = event => {\n      const clickOutsideInput = dropdownInputWrapperRef.current && !dropdownInputWrapperRef.current.contains(event.target);\n      const clickOutsideDropdown = dropdownRef.current && !dropdownRef.current.contains(event.target);\n      if (clickOutsideInput && clickOutsideDropdown) closeDropdown();\n    };\n\n    document.addEventListener('click', handleOutsideClick);\n    return () => document.removeEventListener('click', handleOutsideClick);\n  }, [dropdownInputWrapperRef, dropdownRef, closeDropdown]);\n\n  const removeSelectedItem = event => {\n    try {\n      event.preventDefault();\n      let currentColor = event.currentTarget.parentNode.firstChild.innerHTML;\n      let finalArray = selectedArray.filter(item => currentColor !== item);\n      setSelectedArray(finalArray);\n    } catch (err) {\n      console.error(`error while remove selectedItem:: ${err.message}`);\n    }\n  };\n\n  const renderMultiselectOptions = () => {\n    try {\n      if (!selectedArray || !selectedArray.length === 0) return null;\n      return selectedArray.map((eachArray, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"dropdown-select-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"dropdown-select-item-value\",\n            children: eachArray\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: event => removeSelectedItem(event),\n            children: \"x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this);\n      });\n    } catch (err) {\n      console.error(`error while render multiSelectedItem:: ${err.message}`);\n    }\n  };\n\n  const handleSearch = event => {\n    try {\n      const currentSearchValue = event.target.value;\n      setSearchTerm(currentSearchValue);\n      let timeOutId;\n      clearTimeout(timeOutId);\n      timeOutId = setTimeout(() => {\n        if (searchTerm) {\n          const currentSearchTerm = colorArray.filter(arr => arr.includes(currentSearchValue) ? arr : null);\n          setColorArray(currentSearchTerm);\n        } else setColorArray(colors);\n      }, 500);\n    } catch (err) {\n      console.error(`error while handling search:: ${err.message}`);\n    }\n  };\n\n  const renderDropdownInput = () => {\n    try {\n      const handleClick = () => {\n        setDropdownVisible(true);\n      };\n\n      const handleFocus = () => {\n        setDropdownVisible(true);\n      };\n\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"dropdown-input\",\n        ref: dropdownInputWrapperRef,\n        children: [renderMultiselectOptions(), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropdown-input-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: \"Enter the color...\",\n            value: searchTerm,\n            ref: dropdownInputRef,\n            type: \"text\",\n            onChange: event => handleSearch(event),\n            onClick: handleClick,\n            onFocus: handleFocus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this);\n    } catch (err) {\n      console.error(`error while rendering dropdown input:: ${err.message}`);\n    }\n  };\n\n  const renderClearButton = () => {\n    try {\n      if (!selectedArray || !selectedArray.length) return null;\n\n      const handleClear = event => {\n        var _dropdownInputRef$cur;\n\n        event.stopPropagation();\n        if (selectedArray && selectedArray.length > 0) setSelectedArray(null);\n        (_dropdownInputRef$cur = dropdownInputRef.current) === null || _dropdownInputRef$cur === void 0 ? void 0 : _dropdownInputRef$cur.focus();\n        setColorArray(colors);\n      };\n\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-clear\",\n        onClick: event => handleClear(event),\n        children: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }, this);\n    } catch (err) {\n      console.error(`error while rendering clear button:: ${err.message}`);\n    }\n  };\n\n  const renderDropdownIcon = () => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"dropdown-icon\",\n      children: \">\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 4\n    }, this);\n  };\n\n  const handleAddition = event => {\n    try {\n      var _dropdownInputRef$cur2;\n\n      event.stopPropagation();\n      const currentItem = event.currentTarget.firstChild.innerHTML;\n\n      if (!selectedArray.includes(currentItem)) {\n        setSelectedArray([...selectedArray, currentItem]);\n      } else alert('The color has already added');\n\n      setSearchTerm('');\n      (_dropdownInputRef$cur2 = dropdownInputRef.current) === null || _dropdownInputRef$cur2 === void 0 ? void 0 : _dropdownInputRef$cur2.focus();\n      setColorArray(colors);\n    } catch (err) {\n      console.error(`error while adding color:: ${err.message}`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropdown-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdown-wrapper\",\n      children: [renderDropdownInput(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown-action\",\n        children: [renderClearButton(), renderDropdownIcon()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), dropdownVisible ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      ref: dropdownRef,\n      className: \"dropdown-menu\",\n      children: colorArray.map((eachColor, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"dropdown-list\",\n          onClick: event => handleAddition(event),\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: eachColor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 41\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 37\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 21\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SearchDropdown, \"s5UnQX+dDLrCO2LQFFxxnlPjh0Y=\");\n\n_c = SearchDropdown;\nexport default SearchDropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchDropdown\");","map":{"version":3,"sources":["/Users/sathyasomu/Works/Personal/dropdown-search/src/components/searchDropdown.jsx"],"names":["React","useState","useEffect","useRef","useCallback","SearchDropdown","colors","selectedArray","setSelectedArray","searchTerm","setSearchTerm","colorArray","setColorArray","dropdownVisible","setDropdownVisible","dropdownInputWrapperRef","dropdownInputRef","dropdownRef","closeDropdown","handleOutsideClick","event","clickOutsideInput","current","contains","target","clickOutsideDropdown","document","addEventListener","removeEventListener","removeSelectedItem","preventDefault","currentColor","currentTarget","parentNode","firstChild","innerHTML","finalArray","filter","item","err","console","error","message","renderMultiselectOptions","length","map","eachArray","index","handleSearch","currentSearchValue","value","timeOutId","clearTimeout","setTimeout","currentSearchTerm","arr","includes","renderDropdownInput","handleClick","handleFocus","renderClearButton","handleClear","stopPropagation","focus","renderDropdownIcon","handleAddition","currentItem","alert","eachColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\n\nconst SearchDropdown = () => {\n    const colors = ['voilet', 'green', 'blue', 'green', 'yellow', 'orange', 'red'];\n    const [selectedArray, setSelectedArray] = useState([]);\n    const [searchTerm, setSearchTerm] = useState(null);\n    const [colorArray, setColorArray] = useState(colors);\n\tconst [dropdownVisible, setDropdownVisible] = useState(false);\n\n    const dropdownInputWrapperRef = useRef(null);\n\tconst dropdownInputRef = useRef(null);\n\tconst dropdownRef = useRef(null);\n\n    const closeDropdown = useCallback(() => {\n\t\tsetDropdownVisible(false);\n\t}, [setDropdownVisible]);\n\n    useEffect(() => {\n\t\tconst handleOutsideClick = (event) => {\n\t\t\tconst clickOutsideInput = dropdownInputWrapperRef.current && !dropdownInputWrapperRef.current.contains(event.target);\n\t\t\tconst clickOutsideDropdown = dropdownRef.current && !dropdownRef.current.contains(event.target);\n\t\t\tif (clickOutsideInput && clickOutsideDropdown) closeDropdown();\n\t\t};\n\n\t\tdocument.addEventListener('click', handleOutsideClick);\n\n\t\treturn () => document.removeEventListener('click', handleOutsideClick);\n\t}, [dropdownInputWrapperRef, dropdownRef, closeDropdown]);\n\n    const removeSelectedItem = (event) => {\n        try {\n            event.preventDefault();\n            let currentColor = event.currentTarget.parentNode.firstChild.innerHTML;\n            let finalArray = selectedArray.filter((item) => currentColor !== item);\n    \n            setSelectedArray(finalArray);\n        } catch (err) {\n            console.error(`error while remove selectedItem:: ${err.message}`);\n        }\n    }\n\n    const renderMultiselectOptions = () => {\n        try {\n            if(!selectedArray || !selectedArray.length === 0) return null;\n\n            return selectedArray.map((eachArray, index) => {\n                return (\n                    <li key={index} className=\"dropdown-select-item\">\n                        <span className=\"dropdown-select-item-value\">\n                            {eachArray}\n                        </span>\n                        <button onClick={(event) => removeSelectedItem(event)}>x</button>\n                    </li>\n                );\n            });\n        } catch (err) {\n            console.error(`error while render multiSelectedItem:: ${err.message}`);\n        }\n\t};\n\n    const handleSearch = (event) => {\n        try {\n            const currentSearchValue = event.target.value;\n            setSearchTerm(currentSearchValue);\n            let timeOutId;\n            \n            clearTimeout(timeOutId);\n            timeOutId = setTimeout(() => {\n                if (searchTerm) {\n                    const currentSearchTerm = colorArray.filter((arr) => arr.includes(currentSearchValue) ? arr : null)\n                    setColorArray(currentSearchTerm);\n                } else setColorArray(colors);\n            }, 500);\n        } catch (err) {\n            console.error(`error while handling search:: ${err.message}`);\n        }\n    };\n\n    const renderDropdownInput = () => {\n        try {\n            const handleClick = () => {\n                setDropdownVisible(true);\n            };\n    \n            const handleFocus = () => {\n                setDropdownVisible(true);\n            }\n     \n            return (\n                <ul className=\"dropdown-input\" ref={dropdownInputWrapperRef}>\n                    {renderMultiselectOptions()}\n                    <div className=\"dropdown-input-wrapper\">\n                        <input\n                            placeholder='Enter the color...'\n                            value={searchTerm}\n                            ref={dropdownInputRef}\n                            type=\"text\"\n                            onChange={(event) => handleSearch(event)}\n                            onClick={handleClick}\n                            onFocus={handleFocus}\n                        />\n                    </div>\n                </ul>\n            );\n        } catch (err) {\n            console.error(`error while rendering dropdown input:: ${err.message}`);\n        }\n\t};\n\n    const renderClearButton = () => {\n        try {\n            if(!selectedArray || !selectedArray.length) return null;\n\n            const handleClear = (event) => {\n                event.stopPropagation();\n                if (selectedArray && selectedArray.length > 0) setSelectedArray(null);\n                dropdownInputRef.current?.focus();\n                setColorArray(colors);\n            };\n            return (<button className=\"btn-clear\" onClick={(event) => handleClear(event)}>x</button>);\n        } catch (err) {\n            console.error(`error while rendering clear button:: ${err.message}`);\n        }\n\t};\n\n    const renderDropdownIcon = () => {\n\t\treturn (\n\t\t\t<button className=\"dropdown-icon\">></button>\n\t\t);\n\t};\n\n    const handleAddition = (event) => {\n        try {\n            event.stopPropagation();\n            const currentItem = event.currentTarget.firstChild.innerHTML;\n    \n            if(!selectedArray.includes(currentItem)) {\n                setSelectedArray([...selectedArray, currentItem]);\n            } else alert('The color has already added');\n            \n            setSearchTerm('');\n            dropdownInputRef.current?.focus();\n            setColorArray(colors);\n        } catch (err) {\n            console.error(`error while adding color:: ${err.message}`);\n        }\n    }\n\n    return (\n        <div className=\"dropdown-container\">\n            <div className='dropdown-wrapper'>\n                {renderDropdownInput()}\n                <div className='dropdown-action'>\n                    {renderClearButton()}\n                    {renderDropdownIcon()}\n                </div>\n            </div>\n            {\n                dropdownVisible ? (\n                    <ul ref={dropdownRef} className=\"dropdown-menu\">\n                        {\n                            colorArray.map((eachColor, index) => {\n                                return (\n                                    <li className=\"dropdown-list\" key={index} onClick={(event) => handleAddition(event)}>\n                                        <span>{eachColor}</span>\n                                    </li>\n                                )\n                            })\n                        }\n                    </ul>\n                ) : null\n            }\n        </div>\n    );\n}\n\nexport default SearchDropdown"]},"metadata":{},"sourceType":"module"}